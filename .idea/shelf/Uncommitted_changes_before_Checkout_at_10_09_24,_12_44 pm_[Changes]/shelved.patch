Index: edubot_pg.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># from langchain_community.llms import Ollama\n# from langchain.chains import create_retrieval_chain\n# from langchain.chains.combine_documents import create_stuff_documents_chain\nfrom sentence_transformers import SentenceTransformer\nimport psycopg2\nfrom langchain_google_genai import (\n    ChatGoogleGenerativeAI,\n    HarmBlockThreshold,\n    HarmCategory,\n)\nfrom langchain_huggingface import HuggingFaceEmbeddings\nfrom langchain_community.cross_encoders import HuggingFaceCrossEncoder\nfrom langchain.retrievers.document_compressors import CrossEncoderReranker\nfrom operator import itemgetter\nimport streamlit as st\nfrom langchain_cohere import (\n    CohereEmbeddings,   \n    CohereRerank,\n    # ChatCohere\n)\nfrom langchain_core.prompts import (\n    ChatPromptTemplate,\n    MessagesPlaceholder, \n    SystemMessagePromptTemplate, \n    HumanMessagePromptTemplate\n)\nfrom langchain_postgres import PGVector\nfrom langchain.retrievers.contextual_compression import ContextualCompressionRetriever\nfrom langchain_groq import ChatGroq\n\nfrom config_pg import *\n\n\nclass EduBotCreator:\n\n    def __init__(self):\n        self.system_prompt_template_1 = SYSTEM_PROMPT_TEMPLATE_1\n        self.system_prompt_template_2 = SYSTEM_PROMPT_TEMPLATE_2\n        self.human_prompt_template_1 = HUMAN_PROMPT_TEMPLATE_1\n        self.human_prompt_template_2 = HUMAN_PROMPT_TEMPLATE_2\n        self.search_kwargs = SEARCH_KWARGS\n        self.embedder = EMBEDDER\n        self.connection_string = CONNECTION_STRING\n        self.model_type = MODEL_TYPE\n        self.temperature = TEMPERATURE\n        self.collection_name = COLLECTION_NAME\n        self.pg_conn_params = PG_CONN_PARAMS\n\n    def create_chat_prompt_1(self):\n        chat_prompt_1 = ChatPromptTemplate.from_messages([\n        SystemMessagePromptTemplate.from_template(self.system_prompt_template_1),\n        HumanMessagePromptTemplate.from_template(self.human_prompt_template_1)\n        ])\n        return chat_prompt_1\n    \n    def create_chat_prompt_2(self):\n\n        chat_prompt_2 = ChatPromptTemplate.from_messages([\n        SystemMessagePromptTemplate.from_template(self.system_prompt_template_2),\n        MessagesPlaceholder(variable_name=\"chat_history\"),\n        HumanMessagePromptTemplate.from_template(self.human_prompt_template_2)\n        ])\n        return chat_prompt_2\n    \n    def create_embedding_model_instance(self):\n        embedding_model = SentenceTransformer(\n            \"mixedbread-ai/mxbai-embed-large-v1\"\n            ) \n        return embedding_model\n\n    def get_embedding(self, user_query):\n        \n        response = self.embedding_model\n\n        embedding = response.encode(user_query)\n\n        # Converting the embedding to the pgvector and returning it\n        return '[' + ','.join(map(str, embedding)) + ']'\n\n    def own_retriever(self, user_query):\n        conn = psycopg2.connect(**self.pg_conn_params)\n        cursor = conn.cursor()\n        \n        prompt_vector = self.get_embedding(user_query)\n        cursor.execute('SET max_parallel_workers_per_gather = 4')\n        cursor.execute(\n            'SELECT text,url '\n            'FROM madhav_news_scroll11 WHERE 1 - (embeddings_mxdbread <=> %(prompt_vector)s) >= %(match_threshold)s '\n            'ORDER BY embeddings_mxdbread <=> %(prompt_vector)s LIMIT %(match_cnt)s',\n            {'prompt_vector': prompt_vector, 'match_threshold': 0.2, 'match_cnt': 1}\n        )\n        result = cursor.fetchall()\n        return result\n\n    def format_docs_2(context, source):\n        formatted_docs = []\n        # Iterate over each document in the source list\n        for doc_content, doc_source in source:\n            # Format each document's page content and metadata\n            formatted_doc = f\"context:\\n```\\n{doc_content}\\n```\\nsource:\\n({doc_source})\"\n            formatted_docs.append(formatted_doc)\n        # Join all formatted documents with two newlines\n        return \"\\n\\n\".join(formatted_docs)\n\n\n    @staticmethod\n    def format_docs(docs):\n        formatted_docs = []\n        for doc in docs:\n            # Format each document's page content and metadata\n            formatted_doc = f\"context:\\n```\\n{doc.page_content}\\n```\\nsource:\\n({doc.metadata['source']})\"\n            formatted_docs.append(formatted_doc)\n        # Join all formatted documents with two newlines\n        return \"\\n\\n\".join(formatted_docs)\n\n    @staticmethod\n    def format_content(obj):\n        return obj.content\n    \n    def format_chat_history(messages):\n        if not messages:\n            return \"\"\n    \n        formatted = \"\"\n        for message in messages:\n            if message[\"role\"] == \"human\":\n                formatted += f\"Human: {message['content']}\\n\"\n            elif message[\"role\"] == \"assistant\":\n                formatted += f\"Assistant: {message['content']}\\n\\n\"\n        return formatted.strip()\n\n    def create_history_aware_retriever(self):\n        try:\n            history_aware_retriever = self.chat_prompt_1 | self.llm | self.format_content | self.own_retriever\n            return history_aware_retriever\n        except Exception as e:\n            st.error(f\"error creating history aware retriever: {e}\")\n    \n    def create_bot(self):\n        try:\n            rag_chain = (\n            {\"chat_history\":itemgetter(\"chat_history\"), \"context\": self.history_aware_retriever | self.format_docs_2, \"user_question\": itemgetter(\"user_question\")}\n            | self.chat_prompt_2 \n            | self.llm\n            )\n            return rag_chain\n        except Exception as e:\n            st.error(f\"Error creating Rag chain: {e}\")\n\n\n    def load_llm(self):\n        # llm = ChatGoogleGenerativeAI(model=self.model_type, temperature=self.temperature, safety_settings={\n        #     HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,\n        #     HarmCategory.HARM_CATEGORY_HARASSMENT : HarmBlockThreshold.BLOCK_NONE,\n        #     HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT : HarmBlockThreshold.BLOCK_NONE,\n        #     HarmCategory.HARM_CATEGORY_HATE_SPEECH : HarmBlockThreshold.BLOCK_NONE\n        \n        # })\n        llm = ChatGroq(\n            # model = \"llama-3.1-70b-versatile\",\n            # model=\"llama-3.1-8b-instant\",\n            model = \"llama3-70b-8192\",\n            # model = \"llama3-8b-8192\",\n            temperature = 0,\n        )        \n        return llm\n    \n    def load_vectorstore(self):\n        embeddings = HuggingFaceEmbeddings(\n                            model_name = self.embedder,\n                            model_kwargs = {'trust_remote_code': True}\n                        )\n        vectorstore = PGVector.from_existing_index(collection_name=self.collection_name,embedding=embeddings,connection=self.connection_string,)\n        return vectorstore\n    \n\n    def create_edubot(self):\n        self.chat_prompt_1 = self.create_chat_prompt_1()\n        self.chat_prompt_2 = self.create_chat_prompt_2()\n        # self.vectorstore = self.load_vectorstore()\n        self.embedding_model = self.create_embedding_model_instance()\n        self.llm = self.load_llm()\n        # self.retriever = self.vectorstore.as_retriever(search_type=\"similarity\", search_kwargs=self.search_kwargs)\n        self.history_aware_retriever = self.create_history_aware_retriever()\n        self.bot = self.create_bot()\n        return self.bot
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/edubot_pg.py b/edubot_pg.py
--- a/edubot_pg.py	(revision 2debb5d1b9cc54cd62ae00f237a34f2bcb7a8ee6)
+++ b/edubot_pg.py	(date 1725951093223)
@@ -3,11 +3,7 @@
 # from langchain.chains.combine_documents import create_stuff_documents_chain
 from sentence_transformers import SentenceTransformer
 import psycopg2
-from langchain_google_genai import (
-    ChatGoogleGenerativeAI,
-    HarmBlockThreshold,
-    HarmCategory,
-)
+
 from langchain_huggingface import HuggingFaceEmbeddings
 from langchain_community.cross_encoders import HuggingFaceCrossEncoder
 from langchain.retrievers.document_compressors import CrossEncoderReranker
